/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * My Advanced component does many things
     * @cssprop --my-advanced-slot-color - color of the slot
     * @csspart my-advanced-slot - the slot container
     */
    interface MyAdvanced {
        /**
          * A custom format function for the name
         */
        "customFormat": (first: string, middle: string, last: string[]) => JSX.Element;
        /**
          * A method that does something
         */
        "doSomething": () => Promise<void>;
        /**
          * The first name
         */
        "first": string;
        /**
          * A method to get "foo"
         */
        "getFoo": () => Promise<"foo">;
        /**
          * Whether to show the button
         */
        "hideButton": boolean;
        /**
          * The last name
         */
        "last": string |string[];
        /**
          * The middle name
         */
        "middle": string;
        /**
          * The step to increment the clicked counter
         */
        "step": number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MySlotted {
    }
}
export interface MyAdvancedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyAdvancedElement;
}
declare global {
    interface HTMLMyAdvancedElementEventMap {
        "myClick": number;
    }
    /**
     * My Advanced component does many things
     * @cssprop --my-advanced-slot-color - color of the slot
     * @csspart my-advanced-slot - the slot container
     */
    interface HTMLMyAdvancedElement extends Components.MyAdvanced, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyAdvancedElementEventMap>(type: K, listener: (this: HTMLMyAdvancedElement, ev: MyAdvancedCustomEvent<HTMLMyAdvancedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyAdvancedElementEventMap>(type: K, listener: (this: HTMLMyAdvancedElement, ev: MyAdvancedCustomEvent<HTMLMyAdvancedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyAdvancedElement: {
        prototype: HTMLMyAdvancedElement;
        new (): HTMLMyAdvancedElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMySlottedElement extends Components.MySlotted, HTMLStencilElement {
    }
    var HTMLMySlottedElement: {
        prototype: HTMLMySlottedElement;
        new (): HTMLMySlottedElement;
    };
    interface HTMLElementTagNameMap {
        "my-advanced": HTMLMyAdvancedElement;
        "my-component": HTMLMyComponentElement;
        "my-slotted": HTMLMySlottedElement;
    }
}
declare namespace LocalJSX {
    /**
     * My Advanced component does many things
     * @cssprop --my-advanced-slot-color - color of the slot
     * @csspart my-advanced-slot - the slot container
     */
    interface MyAdvanced {
        /**
          * A custom format function for the name
         */
        "customFormat"?: (first: string, middle: string, last: string[]) => JSX.Element;
        /**
          * The first name
         */
        "first"?: string;
        /**
          * Whether to show the button
         */
        "hideButton"?: boolean;
        /**
          * The last name
         */
        "last"?: string |string[];
        /**
          * The middle name
         */
        "middle"?: string;
        "onMyClick"?: (event: MyAdvancedCustomEvent<number>) => void;
        /**
          * The step to increment the clicked counter
         */
        "step"?: number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MySlotted {
    }
    interface IntrinsicElements {
        "my-advanced": MyAdvanced;
        "my-component": MyComponent;
        "my-slotted": MySlotted;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * My Advanced component does many things
             * @cssprop --my-advanced-slot-color - color of the slot
             * @csspart my-advanced-slot - the slot container
             */
            "my-advanced": LocalJSX.MyAdvanced & JSXBase.HTMLAttributes<HTMLMyAdvancedElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-slotted": LocalJSX.MySlotted & JSXBase.HTMLAttributes<HTMLMySlottedElement>;
        }
    }
}
